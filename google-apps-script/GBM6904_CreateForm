// Create Google Forms for grading students during their oral presentation for the course GBM6904.
// 
// This script does the following:
// - Fetches a Google Sheet that lists all students enrolled in the class (specific format for the sheet is required)
// - Loops across students
// - For each student, generate a Google Form and put it under OutputFolder
// 
// Before running:
// - Update URL to Google Sheet
// - Update output folder
// 
// WARNING! If the list of students is high (typically >30 students), the script does not finish after 6 minutes and an error is sent: "Exceeded maximum execution time". If that happens, change the variable indexStart and re-run the script.
// 
// Author: Julien Cohen-Adad
// 
// Useful info: 
// - https://developers.google.com/apps-script/reference/forms
// - https://cloud.google.com/blog/products/application-development/auto-generating-google-forms
// - https://codewithcurt.com/populate-options-on-google-forms-from-google-sheets/

// Parameters to setup
const SpreadSheet = "15FNkWQOkIUHWwm3QYLregszKL_usMO_U35hmS4TMv-I"
const OutputFolder = "GBM6904-2022_GoogleForms"
const indexStart = 1  // If "Exceeded maximum execution time" is encountered, change this to the index to start from and re-run the script.

// Script starts here
var folder=DriveApp.getFoldersByName(OutputFolder).next();

function createForm() {
  // Fetch names of all students
  var googleSheetsValues = getValueFromGoogleSheet();
  // Loop across students
  for(j = indexStart; j < googleSheetsValues.length; j++)
  {
    // create & name Form
    var FirstName = googleSheetsValues[j][1];
    var LastName = googleSheetsValues[j][2];
    var form = FormApp.create("GBM6904-2022_" + FirstName + LastName)
                      .setTitle("Étudiant : " + FirstName + " " + LastName)
                      .setDescription("Ce formulaire est utilisé pour noter la présentation. Veuillez inclure des commentaires constructifs à la fin.");

    // Populate Form
    item = "Votre matricule étudiant :";  
    form.addTextItem()
        .setTitle(item)
        .setRequired(true);
        // TODO: check if number
    form.addScaleItem()  
        .setTitle("1. Le contexte était introduit")
        .setHelpText("Context was introduced")  // TODO: put this in italic
        .setBounds(1, 5)
        .setLabels("Mauvais", "Excellent")
        .setRequired(true);  
    form.addScaleItem()  
        .setTitle("2. Les buts de la recherche étaient clairement définis")
        .setHelpText("Research goals were well defined")  // TODO: put this in italic
        .setBounds(1, 5)
        .setLabels("Mauvais", "Excellent")
        .setRequired(true);  
    form.addScaleItem()  
        .setTitle("3. La méthodologie était clairement décrite")
        .setHelpText("Research methods were clearly described")  // TODO: put this in italic
        .setBounds(1, 5)
        .setLabels("Mauvais", "Excellent")
        .setRequired(true);  
    form.addScaleItem()  
        .setTitle("4. La discussion et interprétation des résultats étaient cohérents")
        .setHelpText("Discussion/Interpretation of results was coherent")  // TODO: put this in italic
        .setBounds(1, 5)
        .setLabels("Mauvais", "Excellent")
        .setRequired(true);  
    form.addScaleItem()  
        .setTitle("5. Les messages 'Take home' étaient synthétiques et représentatifs du projet")
        .setHelpText("Take home messages were synthetics and representative of the project")  // TODO: put this in italic
        .setBounds(1, 5)
        .setLabels("Mauvais", "Excellent")
        .setRequired(true);  
    form.addScaleItem()  
        .setTitle("6. Les diapositives étaient claires")
        .setHelpText("Slides were clear")  // TODO: put this in italic
        .setBounds(1, 5)
        .setLabels("Mauvais", "Excellent")
        .setRequired(true);  
    form.addScaleItem()  
        .setTitle("7. La présentation était ajustée à l'audience")
        .setHelpText("The presentation was adjusted to the audience")  // TODO: put this in italic
        .setBounds(1, 5)
        .setLabels("Mauvais", "Excellent")
        .setRequired(true);  
    form.addScaleItem()  
        .setTitle("8. L'étudiant.e parlait distinctement")
        .setHelpText("The student spoke distinctly")  // TODO: put this in italic
        .setBounds(1, 5)
        .setLabels("Mauvais", "Excellent")
        .setRequired(true);  
    form.addScaleItem()  
        .setTitle("9. L'étudiant.e a respecté les contraintes de temps")
        .setHelpText("Presenter respected the time constraints")  // TODO: put this in italic
        .setBounds(1, 5)
        .setLabels("Mauvais", "Excellent")
        .setRequired(true);  
    form.addScaleItem()
        .setTitle("10. Les questions étaient correctement répondues")
        .setHelpText("Questions were correctly answered")  // TODO: put this in italic
        .setBounds(1, 5)
        .setLabels("Mauvais", "Excellent")
        .setRequired(true);  
    form.addParagraphTextItem()
        .setTitle("S'il vous plaît donnez un retour constructif à l'étudiant.e (anonyme)")
        .setHelpText("Please provide constructive feedback to the student (anonymous)")
        .setRequired(false);
    
    // Save form in output folder
    saveItemInFolder(form,folder);

    // Add to Google Sheet entry
    var formUrlLong = form.getPublishedUrl();
    var formUrlShort = form.shortenFormUrl(formUrlLong);    
    var ss = SpreadsheetApp.openById(SpreadSheet);
    ss.getSheetByName('Sheet1').getRange(j+1,5).setValue(formUrlShort);
  }
}


function getValueFromGoogleSheet() {
  var ss = SpreadsheetApp.openById(SpreadSheet);
  var questionSheet = ss.getSheetByName('Sheet1');
  var returnData = questionSheet.getDataRange().getValues();
  return returnData;
}

/**
 * Places file for given item into given folder.
 * If the item is an object that does not support the getId() method or
 * the folder is not a Folder object, an error will be thrown.
 * From: http://stackoverflow.com/a/38042090/1677912
 *
 * @param {Object}  item     Any object that has an ID and is also a Drive File.
 * @param {Folder}  folder   Google Drive Folder object.
 */
function saveItemInFolder(item,folder) {
  var id = item.getId();  // Will throw error if getId() not supported.
  folder.addFile(DriveApp.getFileById(id));
}
